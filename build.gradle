/*
 * Copyright Â© 2017, 2023 IBM Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    alias(libs.plugins.springboot)
    alias(libs.plugins.spotbugs)
    alias(libs.plugins.sq)
}

group = 'com.ibm.cloud'
version = new File(rootDir, 'VERSION').text.trim()

// If the version says "snapshot" anywhere assume it is not a release
ext.isReleaseVersion = !version.toUpperCase(Locale.ENGLISH).contains("SNAPSHOT")

tasks.withType(JavaCompile).configureEach {
    // Build with Java 17 compatibility
    options.release = 17
    // Always UTF-8
    options.encoding = 'UTF-8'
}

repositories {
    if (System.env.ARTIFACTORY_URL != null) {
        maven {
            url = "${System.env.ARTIFACTORY_URL}/cloudant-sdks-maven-virtual"
            credentials {
                username = System.env.ARTIFACTORY_CREDS_USR
                password = System.env.ARTIFACTORY_CREDS_PSW
            }
        }
    } else {
        mavenLocal()
        mavenCentral()
    }
}


dependencies {
    // cloudant-java-sdk client
    api(libs.cloudant)
    // spring
    api(libs.bundles.springApi)
    // testing
    testImplementation(libs.bundles.test)
    testRuntimeOnly(libs.junitPlatformLauncher)
}

java {
    withJavadocJar()
    withSourcesJar()
}

// Include variable debug info in the compiled classes
compileJava.options.debugOptions.debugLevel = "source,lines,vars"

// As a library we don't want to publish an executable jar
// and we'd like the plain jar to have no classifier.
tasks.named("bootJar") {
	enabled = false
}
tasks.named("jar") {
	archiveClassifier = ''
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

javadoc {
    options.encoding 'UTF-8'
    options.setMemberLevel JavadocMemberLevel.PROTECTED
}
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = rootProject.name
                packaging = 'jar'
                url = 'https://www.ibm.com/cloud/cloudant'
                description = 'Spring configuration for the official Cloudant library for Java'
                inceptionYear = '2017'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/IBM/cloudant-spring.git'
                    developerConnection = 'scm:git:git@github.com/IBM/cloudant-spring.git'
                    url = 'https://github.com/IBM/cloudant-spring.git'
                }
                developers {
                    developer {
                        name = 'IBM Cloudant'
                        email = 'cldtsdks@us.ibm.com'
                        url = 'https://www.ibm.com/cloud/cloudant'
                        organization = 'IBM'
                        organizationUrl = 'http://www.ibm.com'
                    }
                }
            }
        }
    }

    signing {
        // use the GPG agent instead of the gradle implementation
        useGpgCmd()
        // When signing, sign the archives
        sign publishing.publications.mavenJava
    }

    repositories {
        maven {
            url = isReleaseVersion ?
                    'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/' :
                    'https://central.sonatype.com/repository/maven-snapshots/'
            credentials(PasswordCredentials) {
                username = System.env.CP_USER
                password = System.env.CP_PASSWORD
            }
        }
    }
}

spotbugs {
    reportLevel = com.github.spotbugs.snom.Confidence.valueOf('LOW')
    effort = com.github.spotbugs.snom.Effort.valueOf('MAX')
    includeFilter = file("findbugs-exclude.xml")
}

spotbugsMain {
    reports {
        xml {
            required = true
        }
    }
}
